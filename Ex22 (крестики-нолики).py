# 20210805 Mike консольные крестики - нолики
M = {'00':'-', '01':'-', '02':'-',  # игровое поле
     '10':'-', '11':'-', '12':'-',
     '20':'-', '21':'-', '22':'-',
     }
K = list(M.keys())                  # список свободных клеток
row0 = ['00', '01', '02']           # выигрышный ряд 1
row1 = ['10', '11', '12']           # ...
row2 = ['20', '21', '22']           # ...
col0 = ['00', '10', '20']           # ...
col1 = ['01', '11', '21']           # ...
col2 = ['02', '12', '22']           # ...
lin1 = ['00', '11', '22']           # ...
lin2 = ['02', '11', '20']           # выигрышная диагональ 2
turn = 'X'                          # ход крестиков (иначе - ноликов)


def disp():                         # вывод текущего игрового поля с указанием координат клеток
    print(' ', '0', '1', '2')
    print('0', M['00'], M['01'], M['02'])
    print('1', M['10'], M['11'], M['12'])
    print('2', M['20'], M['21'], M['22'])


def check_line(s, L):               # проверка заполнения выигрышной линии L знаками s
    a = 0
    for k in L:
        a += ((M[k]) == s)
    if a == 3:
        return True
    else:
        return False


def modify(L):                      # выделение выигравшей линии и удаление координат доступных для хода клеток
    for k in L:
        M[k] = str.upper(M[k])
    list.clear(K)


def check(s):                       # последовательная проверка заполнения всех возможных выигрышных линий
    if check_line(s, row0):
        modify(row0)
    if check_line(s, row1):
        modify(row1)
    if check_line(s, row2):
        modify(row2)
    if check_line(s, col0):
        modify(col0)
    if check_line(s, col1):
        modify(col1)
    if check_line(s, col2):
        modify(col2)
    if check_line(s, lin1):
        modify(lin1)
    if check_line(s, lin2):
        modify(lin2)
    else:                           # выигрыш не обнаружен?
        disp()                      # вывели текущее поле


def getX():                         # ход крестиков
    global turn
    adr = input('Ход X. Введите адрес поля (строка + столбец):')
    if adr not in K:
        print('Поле с указанным адресом недоступно. Допустимы адреса:', K)
    else:
        K.pop(K.index(adr))
        M[adr] = 'x'
        check('x')
        turn = ''


def getY():                         # ход ноликов
    global turn
    adr = input('Ход О. Введите адрес поля (строка + столбец):')
    if adr not in K:
        print('Поле с указанным адресом недоступно. Допустимы адреса:', K)
    else:
        K.pop(K.index(adr))
        M[adr] = 'o'
        check('o')
        turn = 'X'


disp()                              # вывод начального (пустого) игрового поля

while len(K):                       # пока есть свободные клетки
    if turn == 'X':                 # очередь крестиков?
        getX()                      # запросили поле размещения очередного крестика
    else:
        getY()                      # запросили поле размещения очередного нолика
    disp()                          # вывели текущее игровое поле

print('Игра окончена. Определите победителя самостоятельно.')
